{
	// Place your lc_dart workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

    "Generate Test" : {
        "scope": "dart",
        "prefix": "test",
        "description": "generate test case",
        "body": [
            "import 'package:lc_dart/${TM_FILENAME_BASE/_test//gi}.dart';",
            "import 'package:test/test.dart';",
            "void main() {",
            "   group('Test ${TM_FILENAME_BASE/_test//gi}', () {",
            "     final solution = Solution();",
            "     test('#1', () {",
            "        expect(solution.xyz(), equals(0));",
            "      });",
            "     test('#2', () {",
            "        expect(solution.xyz(), equals(0));",
            "      });",
            "",
            "   });",
            "}",
        ]
    },
    "BSearch(match)" : {
        "scope": "dart",
        "prefix": "bsearch(exact)",
        "description": "generate binary search (exact match or -1)",
        "body": [
            "int bsearch(List<int> nums, int left, int right, int target) {",
            "    while (left <= right) {",
            "      var mid = left + (right - left) ~/ 2;",
            "      if (nums[mid] == target) {",
            "        return mid;",
            "      } else if (nums[mid] < target) {",
            "        left = mid + 1;",
            "      } else /*if (nums[mid] > target)*/ {",
            "        right = mid - 1;",
            "      }",
            "    }",
            "    return -1;",
            "}",
        ]
    }
}